" Get the defaults that most users want.
"source $VIMRUNTIME/defaults.vim

set runtimepath=~/.vim/,$VIMRUNTIME,~/.vim/bundle/vim-snippets/,~/.vim/after/

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible    " Use Vim defaults instead of 100% vi compatibility
set backspace=indent,eol,start  " more powerful backspacing

" Now we set some defaults for the editor
" set autoindent    " always set autoindenting on
" set linebreak     " Don't wrap words by default
set textwidth=0     " Don't wrap lines by default
set nobackup
" place for swap files
set dir=/var/tmp
set viminfo='20,\"50    " read/write a .viminfo file, don't store more than
                        " 50 lines of registers
set viminfo+=n/tmp/.viminfo
"http://stackoverflow.com/questions/6286866/how-to-tell-vim-to-store-the-viminfo-file-somewhere-else
"http://vim.1045645.n5.nabble.com/search-vimrc-and-viminfo-in-a-different-directory-td4391875.html
set history=50  " keep 50 lines of command line history
set ruler       " show the cursor position all the time

" modelines have historically been a source of security/resource
" vulnerabilities -- disable by default, even when 'nocompatible' is set
set nomodeline

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc


" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
" enable by Plug
" syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd     " Show (partial) command in status line.
set showmatch       " Show matching brackets.
"set ignorecase     " Do case insensitive matching
"set smartcase      " Do smart case matching
set incsearch       " Incremental search
set autowrite       " Automatically save before commands like :next and :make
set hidden              " Hide buffers when they are abandoned
set wic         " Wildignorecase for cmdline completion especially for filename
"set mouse=a        " Enable mouse usage (all modes) in terminals
set fencs=utf-8,ucs-bom,cp936,gb18310,big5,latin1
set title

"https://groups.google.com/forum/#!msg/vim_use/SR12FCxkQYg/aZIGO33waN0J
set diffexpr=MyDiff()
function MyDiff()
  let opt = ""
  if &diffopt =~ "icase"
    let opt = opt . "-i "
  endif
  if &diffopt =~ "iwhite"
    let opt = opt . "-b "
  endif
  silent execute "!diff -a --binary " . opt . v:fname_in . " " . v:fname_new .
    \  " > " . v:fname_out
endfunction

runtime! ftplugin/man.vim

if !empty($TMUX)"http://stackoverflow.com/questions/9496769/how-to-correctly-use-undefined-environment-variables-in-vimrc
  if &term =~ "screen"
    set t_ts=k "<C-v><C-]>
    set t_fs=\
  endif
  let &t_BE="\<Esc>[?2004h"
  let &t_BD="\<Esc>[?2004l"
  let &t_PS="\<Esc>[200~"
  let &t_PE="\<Esc>[201~"
endif

if has("autocmd")
  " jump to the last position when reopening a file
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

  "http://superuser.com/questions/251019/customizing-tmux-status-to-represent-current-working-directory-and-files
  "http://stackoverflow.com/questions/15123477/tmux-tabs-with-name-of-file-open-in-vim
  "http://vim.wikia.com/wiki/Automatically_set_screen_title
  if !empty($TMUX)
    autocmd BufEnter * let &titlestring = expand('%:.') . ' - VIM'  "TODO man
    auto VimLeave * :set t_ts=k\
    "autocmd BufReadPost,FileReadPost,BufNewFile * call system("tmux rename-window ". expand("%:t"))
  endif
endif " has ("autocmd")

"##### auto fcitx  ###########
"https://wiki.archlinuxcn.org/wiki/Fcitx
let g:input_toggle = 1
function! Fcitx2en()
  if !executable("fcitx-remote")
    return
  endif
  let s:input_status = system("fcitx-remote")
  if s:input_status == 2
     let g:input_toggle = 1
     let l:a = system("fcitx-remote -c")
  endif
endfunction

function! Fcitx2zh()
  if !executable("fcitx-remote")
    return
  endif
  let s:input_status = system("fcitx-remote")
  if s:input_status != 2 && g:input_toggle == 1
     let l:a = system("fcitx-remote -o")
     let g:input_toggle = 0
  endif
endfunction

set ttimeoutlen=150
"退出插入模式
autocmd InsertLeave * call Fcitx2en()
"进入插入模式
"autocmd InsertEnter * call Fcitx2zh()
"##### auto fcitx end ######

" cd to the directory containing the file in the buffer
" https://github.com/olalonde/dotfiles/blob/master/tag-vim/vimrc#L189
nmap <silent> <leader>cd :lcd %:h<CR>
noremap <F12> :e ~/.vim/vimrc<CR>
inoremap <F12> <ESC>:e ~/.vim/vimrc<CR>
"nnoremap <C-H> <C-W>h
"nnoremap <C-J> <C-W>j
"nnoremap <C-K> <C-W>k
"nnoremap <C-L> <C-W>l
"imap <C-Tab> <ESC><C-6>i
" Swap the word the cursor is on with the next word (which can be on a
" newline, and punctuation is "skipped"):
" http://superuser.com/questions/290360/how-to-switch-words-in-an-easy-manner-in-vim
nmap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-o>:noh<CR>
"https://unix.stackexchange.com/questions/329641/can-i-remap-ctrl-j-and-ctrl-k-in-vim
nnoremap <C-k> <C-u>
nnoremap <C-j> <C-d>
nnoremap ;v <C-v>
nnoremap ;c <C-c>
nnoremap ;w <C-w>
nnoremap <leader>r <C-r>

if has('gui_running')
  " Make shift-insert work like in Xterm
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>
endif

set pastetoggle=<F9>  "http://stackoverflow.com/questions/2514445/turning-off-auto-indent-when-pasting-text-into-vim

" Allows writing to files with root priviledges
cmap w!! w !sudo tee % > /dev/null

" https://www.reddit.com/r/vim/comments/4l00pj/eli5_why_is_nerdtree_discouraged_but_everyone/d3jufab
" I don't use these methods of installing vim plugins.
let g:loaded_getscriptPlugin = 0
let g:loaded_vimballPlugin = 0
let g:loaded_netrwPlugin = 0
" LogiPat seems useful, but I've never touched it.
let g:loaded_logiPat = 0

let g:on_demand_autoformat_fts = [ '\<cpp\>', '\<c\>', '\<javascript*', '\<typescript*', '\<go\>', 'python', 'rust', 'dart']
let g:on_demand_fts = g:on_demand_autoformat_fts + [ 'vim', 'ruby', '\<cs*']
let g:on_demand_ft_regex = join(g:on_demand_fts, '\|')

"Vim-Plug
"https://github.com/junegunn/vim-plug
let g:plug_timeout=600000 "ycm https://github.com/junegunn/vim-plug/issues/75
let g:plug_url_format='http://150.230.249.133/%s.git'
call plug#begin('~/.vim/bundle/')

"bundles

"Plug 'mattn/emmet-vim', { 'for': ['html', 'css']}
"let g:user_emmet_install_global = 0
Plug 'Raimondi/delimitMate', { 'for': g:on_demand_fts }
"Plug 'tenfyzhong/CompleteParameter.vim', {'for': g:on_demand_fts }
"Plug 'SirVer/ultisnips', { 'for': ['\<cs*'] } | Plug 'kayw/vim-snippets'
"Plug 'scrooloose/syntastic'
"Plug 'tpope/vim-eneuch' " https://vi.stackexchange.com/questions/305/how-can-i-rename-the-file-im-editing
Plug 'tpope/vim-fugitive' "http://vimcasts.org/episodes/fugitive-vim-working-with-the-git-index/
Plug 'vim-scripts/python_match.vim'
Plug 'andymass/vim-matchup'

Plug 'pangloss/vim-javascript', { 'for': 'javascript*' }
Plug 'mxw/vim-jsx', { 'for': 'javascript.jsx' }
Plug 'wting/rust.vim', {'for': 'rust'}
Plug 'fatih/go.vim', {'for': 'go', 'do': ':GoUpdateBinaries' }
"Plug 'cakebaker/scss-syntax.vim', {'for': 'scss'}

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'altercation/vim-colors-solarized'
"https://github.com/MaskRay/ccls/wiki/Editor-Configuration

Plug 'junegunn/fzf', { 'do': './install --all' }
Plug 'junegunn/fzf.vim'
"Plug 'ap/vim-buftabline'
"Plug 'bagrat/vim-buffet'

Plug 'scrooloose/nerdcommenter', { 'for': g:on_demand_fts }

Plug 'dart-lang/dart-vim-plugin'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ziglang/zig.vim'
"Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
"Plug 'jackguo380/vim-lsp-cxx-highlight', { 'for': ['cpp','c','h','hpp','cc', 'cxx'] }
"Plug 'octol/vim-cpp-enhanced-highlight', { 'for': 'cpp' } "differ highlight for macro namespace type  davits/DyeVim
"Plug 'w0rp/ale'
call plug#end()

" Enabled file type detection
" Use the default filetype settings. If you also want to load indent files
" to automatically do language-dependent indenting add 'indent' as well.
filetype plugin on
" Uncomment the following to have Vim load indentation rules according to the
" detected filetype.
filetype indent on

"coc
" Better display for messages
"set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=no

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? coc#pum#prev(1) : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-@> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" https://github.com/neoclide/coc.nvim/issues/3184
nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"


" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
" https://github.com/neoclide/coc.nvim/issues/869#issuecomment-979283481 doHover
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap gR <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" https://hub.gitfast.tk/neoclide/coc.nvim/issues/1089 <tab> same as <C-i>
" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
" https://vi.stackexchange.com/questions/9839/how-to-use-jumplists-c-i-which-is-seen-as-a-tab - { key: I,        mods: Control, chars:  "\x0e\x69"  }
nmap <silent> <leader>l <Plug>(coc-range-select)
xmap <silent> <leader>l <Plug>(coc-range-select)
xmap <silent> <leader>l <Plug>(coc-range-select-backword)


" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

nmap <Leader>t <Cmd>CocCommand explorer --sources=buffer+,file+<CR>
nmap <Leader>T <Cmd>CocCommand explorer --sources=buffer+,file+ --no-reveal-when-open<CR>
"nmap <Leader>t :let NERDTreeQuitOnOpen = 1<bar>NERDTreeToggle<CR>
"nmap <Leader>T NERDTreeFind<CR>
"CocDisable

"UltiSnip
"ycm TAB key TODO https://github.com/Valloric/YouCompleteMe/issues/36
let g:UltiSnipsExpandTrigger = "<C-e>"
let g:UltiSnipsListSnippets = "<C-g>"
let g:UltiSnipsJumpForwardTrigger="<C-e>"
let g:UltiSnipsJumpBackwardTrigger="<c-f>"
" this mapping Enter key to <C-y> to chose the current highlight item
" " and close the selection list, same as other IDEs.
" " CONFLICT with some plugins like tpope/Endwise
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
let g:snips_author="kayw"

"let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippets"]

"airline
set laststatus=2 "http://superuser.com/questions/634570/vim-how-to-install-airline
let g:airline_theme='tomorrow'
let g:airline#extensions#disable_rtp_load = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 3
let g:airline#extensions#tabline#keymap_ignored_filetypes =
  \ ['fzf', 'nerdtree']
nmap <Leader>01 <Plug>AirlineSelectTab01
nmap <Leader>02 <Plug>AirlineSelectTab02
nmap <Leader>03 <Plug>AirlineSelectTab03
nmap <Leader>04 <Plug>AirlineSelectTab04
nmap <Leader>05 <Plug>AirlineSelectTab05
nmap <Leader>06 <Plug>AirlineSelectTab06
nmap <Leader>07 <Plug>AirlineSelectTab07
nmap <Leader>08 <Plug>AirlineSelectTab08
nmap <Leader>09 <Plug>AirlineSelectTab09
nmap <Leader>10 <Plug>AirlineSelectTab10
nmap <Leader>11 <Plug>AirlineSelectTab11
nmap <Leader>12 <Plug>AirlineSelectTab12
nmap <Leader>13 <Plug>AirlineSelectTab13
nmap <Leader>14 <Plug>AirlineSelectTab14
nmap <Leader>15 <Plug>AirlineSelectTab15
nmap <Leader>16 <Plug>AirlineSelectTab16
nmap <Leader>17 <Plug>AirlineSelectTab17
nmap <Leader>18 <Plug>AirlineSelectTab18
nmap <Leader>19 <Plug>AirlineSelectTab19
nmap <Leader>20 <Plug>AirlineSelectTab20
nmap <Leader>21 <Plug>AirlineSelectTab21
nmap <Leader>22 <Plug>AirlineSelectTab22
nmap <Leader>23 <Plug>AirlineSelectTab23
nmap <Leader>24 <Plug>AirlineSelectTab24
nmap <Leader>25 <Plug>AirlineSelectTab25
nmap <Leader>26 <Plug>AirlineSelectTab26
nmap <Leader>27 <Plug>AirlineSelectTab27
nmap <Leader>28 <Plug>AirlineSelectTab28
nmap <Leader>29 <Plug>AirlineSelectTab29
nmap <Leader>30 <Plug>AirlineSelectTab30

"YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_filepath_blacklist = {} "https://github.com/Valloric/YouCompleteMe/issues/3102
let g:ycm_global_ycm_extra_conf = '~/.vim/compiler/global.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_complete_in_comments = 1
"https://github.com/junegunn/vim-plug/issues/444#issuecomment-195363891  au FileType javascript.jsx change twice autocommand nested e218 save e13 ycm load twice => use if &ft
"https://github.com/junegunn/vim-plug/wiki/faq#loading-plugins-manually
"https://github.com/Valloric/YouCompleteMe/issues/893#issuecomment-53151235
augroup bufevent
  au!
  au BufReadPost,BufEnter * if &ft =~? g:on_demand_ft_regex |
                 \ set nu |
                 \ setl et |
                 \ setl sw=2 |
                 \ setl ts=2 |
                 \ setl sts=2 |
                 \ endif
augroup END

"fzf
"copy from leaderf
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files -.'
elseif executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag -g ""'
endif
nnoremap <leader>f :<C-U>Files<CR>
"nnoremap <leader>f :<C-U>GFiles --cached --others --exclude-standard<CR>
 "https://github.com/junegunn/fzf.vim/issues/121#issuecomment-575922206
nnoremap <leader>b :<C-U>Buffers<CR>


function! s:fzf_ag(...)
  if executable('rg')
    call fzf#vim#grep("rg --column --line-number -. --no-heading --color=always --smart-case -- ".fzf#shellescape(a:1), fzf#vim#with_preview(), a:2)
  elseif executable('ag')
    " https://github.com/junegunn/fzf.vim/issues/92case sensitive Ag call
    call fzf#vim#ag_raw('-s '.fzf#shellescape(a:1), fzf#vim#with_preview(), a:2)
  endif
endfunction

command! -bang -nargs=* Ag  call s:fzf_ag(<q-args>,<bang>0)

nnoremap ;s :Ag <C-R>='\b'.expand('<cword>').'\b'<CR><CR>
" \b\s?<C-R><C-W>\b<CR>   "http://vi.stackexchange.com/a/3168
" <C-R><C-W> word begin with b will eat \b
"nnoremap ;s :<C-u>execute 'Ag! \b'.expand('<cword>').'\b'<CR>
"map <leader>" :Ag! "<C-r>"" -Q<CR>  https://github.com/junegunn/fzf.vim/issues/586
" result window "cover the whole because of -bang ! <bang>0
" <C-R>" as current word
vnoremap ;s y:Ag <C-R>=escape(@",'\')<CR><CR>
"https://www.reddit.com/r/vim/comments/4ffvt1/is_there_a_way_to_switch_between_fzf_commands/

"http://vim.wikia.com/wiki/Search_for_visually_selected_text
vnoremap <silent> * :<C-U>
                    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
                    \gvy/<C-R><C-R>=substitute(
                    \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
                    \gV:call setreg('"', old_reg, old_regtype)<CR>

vnoremap <silent> # :<C-U>
                    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
                    \gvy?<C-R><C-R>=substitute(
                    \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
                    \gV:call setreg('"', old_reg, old_regtype)<CR>

"https://github.com/junegunn/fzf.vim/issues/27
function! s:ag_in(...)
  if executable('rg')
    call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case -- ".fzf#shellescape(a:1), {'dir': join(a:000[1:],' ')})
  elseif executable('ag')
    call fzf#vim#ag(a:1, {'dir': join(a:000[1:], ' ')})
  endif
endfunction
"AgIn dir pattern
command! -nargs=+ -complete=dir AgIn call s:ag_in(<f-args>)

nnoremap <expr> ;d ':AgIn '.expand('<cword>').' '

   "use .. as start path placeholder
vnoremap ;d y:AgIn <C-R>=@<CR> ..

"https://github.com/mg979/vim-visual-multi  https://github.com/dyng/ctrlsf.vim
"https://www.reddit.com/r/vim/comments/owm6o0/comment/h7h8mkf/
function! s:grep_rename_cb(...)
  "let a = a:000[0]
  "https://vi.stackexchange.com/questions/2410/how-to-make-a-vimscript-function-with-optional-arguments
  if executable('rg')
    let searcher = 'rg'
  elseif executable('ag')
    let searcher = 'ag'
  else
    return
  endif
  let a = get(a:, 1)
  let b = get(a:, 2, '')
  if empty(b)
    let b = a:000[0]
    let a = expand('<cword>')
  endif
  if empty(a)
    return
  endif
  let needle = a
  if searcher == 'rg'
    let needle = escape(needle, '*+\[](){}')
  endif
  let pattern = escape(a, '/"')
  "exec 'table | lv /\<' . a . '\>/j ** | ldo s/\<' . a . '\>/' . b . '/gc | up'
  " https://vi.stackexchange.com/questions/24992/how-to-put-the-output-of-a-function-call-into-quickfix-list
  "
  "https://vi.stackexchange.com/questions/21004/prevent-press-enter-or-type-command-to-continue-prompt-after-external-command
  "silent grep foo ** | redraw! get rid of Press ENTER or type command to continue
  " ' no need for backslash, ' doubled  " as single quote   :h string
  " https://vi.stackexchange.com/questions/5612/how-to-redirect-the-output-of-a-command-as-the-quickfix-list-to-a-vim-server-f
  exec 'cex system('''. searcher .' --vimgrep ' . needle . ''') | cfdo %s/\<' . pattern . '\>/' . b . '/gc | up'
endfunction

com! -nargs=+  GrepRename  call s:grep_rename_cb(<f-args>)
"https://vi.stackexchange.com/questions/17194/expandcword-returns-empty-string-in-inoremap
"https://vi.stackexchange.com/questions/16090/trouble-using-cword-in-mapping
nnoremap <expr> ;r ':GrepRename '.expand('<cword>').' '
vnoremap ;r y:GrepRename <C-R>=@"<CR> <C-R>=<CR>

"delimitMate
au FileType vim let b:delimitMate_matchpairs = "(:),[:],{:},<:>"
             \| let b:delimitMate_quotes = "' `"

"javascript-vim
let javascript_enable_domhtmlcss=1
let g:jsx_ext_required = 0

"dart-vim
let dart_format_on_save = 1
"let dart_style_guide = 2
"let g:ale_dart_dartanalyzer_executable = ''

"vims-lsc
"let g:lsc_auto_map = v:true
"autocmd CompleteDone * silent! pclose

"autoformat
"http://stackoverflow.com/a/23496781
"autocmd BufWritePre *.{js,jsx,go,py,go,rs} :Autoformat
"http://stackoverflow.com/a/27334950
"au BufWritePre * if &ft =~? join(g:on_demand_autoformat_fts, '\|') | Autoformat | endif

"let g:formatdef_eslint_javascript = 'g:eslint_path." --fix"'
"let g:formatters_javascript = ['eslint_javascript']
"let g:formatters_python = [ 'yapf' ]
"let g:formatter_yapf_style = 'chromium'

"buftabline
let g:buftabline_numbers = 1
let g:buftabline_indicators = 1

"colorscheme
set background=light "dark
let g:solarized_contrast="low"
let g:solarized_visibility="high"
"if $TERM =~ "-256color"   plain alacritty / win mingw git bash also need 256
  se t_Co=256
  let g:solarized_termcolors=256
  let g:solarized_contrast="high"
  let g:solarized_termtrans=1
"endif
colo solarized

"https://github.com/OmniSharp/omnisharp-vim/issues/703
let g:OmniSharp_server_use_net6=1
let g:OmniSharp_want_snippet=1
"set completeopt=longest,menuone,popuphidden
" Highlight the completion documentation popup background/foreground the same as
" the completion menu itself, for better readability with highlighted
" documentation.
"set completepopup=highlight:Pmenu,border:off
augroup omnisharp_commands
  autocmd!

  " Show type information automatically when the cursor stops moving.
  " Note that the type is echoed to the Vim command line, and will overwrite
  " any other messages in this space including e.g. ALE linting messages.
  "autocmd CursorHold *.cs OmniSharpTypeLookup

  " The following commands are contextual, based on the cursor position.
  autocmd FileType cs nmap <silent> <buffer> gd <Plug>(omnisharp_go_to_definition)
  autocmd FileType cs nmap <silent> <buffer> gr <Plug>(omnisharp_find_usages)
  autocmd FileType cs nmap <silent> <buffer> gi <Plug>(omnisharp_find_implementations)
  autocmd FileType cs nmap <silent> <buffer> gpd <Plug>(omnisharp_preview_definition)
  autocmd FileType cs nmap <silent> <buffer> gpr <Plug>(omnisharp_preview_implementations)
  autocmd FileType cs nmap <silent> <buffer> gt <Plug>(omnisharp_type_lookup)
  autocmd FileType cs nmap <silent> <buffer> K <Plug>(omnisharp_documentation)
  autocmd FileType cs nmap <silent> <buffer> <Leader>gs <Plug>(omnisharp_find_symbol)
  autocmd FileType cs nmap <silent> <buffer> <Leader>ufx <Plug>(omnisharp_fix_usings)
  autocmd FileType cs nmap <silent> <buffer> <C-\> <Plug>(omnisharp_signature_help)
  autocmd FileType cs imap <silent> <buffer> <C-\> <Plug>(omnisharp_signature_help)

  " Navigate up and down by method/property/field
  autocmd FileType cs nmap <silent> <buffer> [[ <Plug>(omnisharp_navigate_up)
  autocmd FileType cs nmap <silent> <buffer> ]] <Plug>(omnisharp_navigate_down)
  " Find all code errors/warnings for the current solution and populate the quickfix window
  autocmd FileType cs nmap <silent> <buffer> <Leader>gcc <Plug>(omnisharp_global_code_check)
  " Contextual code actions (uses fzf, vim-clap, CtrlP or unite.vim selector when available)
  autocmd FileType cs nmap <silent> <buffer> <Leader>ac <Plug>(omnisharp_code_actions)
  autocmd FileType cs xmap <silent> <buffer> <Leader>ac <Plug>(omnisharp_code_actions)
  " Repeat the last code action performed (does not use a selector)
  autocmd FileType cs nmap <silent> <buffer> <Leader>os. <Plug>(omnisharp_code_action_repeat)
  autocmd FileType cs xmap <silent> <buffer> <Leader>os. <Plug>(omnisharp_code_action_repeat)

  autocmd FileType cs nmap <silent> <buffer> <Leader>gf <Plug>(omnisharp_code_format)

  autocmd FileType cs nmap <silent> <buffer> gR <Plug>(omnisharp_rename)

  autocmd FileType cs nmap <silent> <buffer> <Leader>osre <Plug>(omnisharp_restart_server)
  autocmd FileType cs nmap <silent> <buffer> <Leader>osst <Plug>(omnisharp_start_server)
  autocmd FileType cs nmap <silent> <buffer> <Leader>ossp <Plug>(omnisharp_stop_server)
  au BufReadPost,BufEnter *.cs setl sw=4
augroup END
"https://github.com/OmniSharp/omnisharp-vim/wiki/Example-config
" ALE: {{{
let g:ale_lint_on_text_changed = 'never'
let g:ale_open_list = 0

let g:ale_linters = {'cpp': ['clangtidy']}
let g:ale_c_clangtidy_checks=[]
let g:ale_cpp_clangtidy_checks=[]
let g:ale_fixers = {
      \   'javascript': ['eslint'],
      \   'dart': ['dartfmt'],
      \   'cpp': ['clang-format'],
      \}
let g:ale_linters = {'dart': []}
let g:ale_fix_on_save = 1

let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'
let g:ale_sign_info = '·'
let g:ale_sign_style_error = '·'
let g:ale_sign_style_warning = '·'

let g:ale_linters = { 'cs': ['OmniSharp'] }
" }}}
